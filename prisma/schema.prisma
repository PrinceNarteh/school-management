// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
}

model Admin {
  id         Int      @id @default(autoincrement())
  firstName  String   @map("first_name")
  middleName String?  @map("middle_name")
  lastName   String   @map("last_name")
  gender     Gender
  email      String   @unique
  password   String
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@map("admin")
}

model Staff {
  id                Int                 @id @default(autoincrement())
  firstName         String              @map("first_name")
  middleName        String?             @map("middle_name")
  lastName          String              @map("last_name")
  gender            Gender
  email             String              @unique
  password          String
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  subjects          Subject[]
  staffNotification StaffNotification[]
  staffLeaveReport  StaffLeaveReport[]
  staffFeedback     StaffFeedback[]

  @@map("staff")
}

model StaffFeedback {
  id        Int      @id @default(autoincrement())
  staffId   Int
  staff     Staff    @relation(fields: [staffId], references: [id], onDelete: Cascade)
  message   String   @db.Text
  reply     String   @db.Text
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("staff_report")
}

model StaffLeaveReport {
  id        Int      @id @default(autoincrement())
  staffId   Int
  staff     Staff    @relation(fields: [staffId], references: [id], onDelete: Cascade)
  date      DateTime
  message   String   @db.Text
  status    Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("staff_leave_report")
}

model StaffNotification {
  id        Int      @id @default(autoincrement())
  message   String
  staffId   Int
  staff     Staff    @relation(fields: [staffId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("staff_notification")
}

enum AdmissionStatus {
  Recieved
  InProgress
  Admitted
}

model Student {
  id                 Int                   @id @default(autoincrement())
  firstName          String                @map("first_name")
  middleName         String?               @map("middle_name")
  lastName           String                @map("last_name")
  gender             Gender
  dateOfBirth        DateTime              @map("date_of_birth")
  profilePic         String                @map("profile_pic")
  password           String
  admissionStatus    AdmissionStatus       @default(Recieved) @map("admission_status")
  createdAt          DateTime              @default(now()) @map("created_at")
  updatedAt          DateTime              @updatedAt @map("updated_at")
  notifications      StudentNotification[]
  assessment         Assessment[]
  assessmentReport   AssessmentReport[]
  studentLeaveReport StudentLeaveReport[]
  studentFeedback    StudentFeedback[]

  @@map("student")
}

model StudentFeedback {
  id        Int      @id @default(autoincrement())
  studentId Int
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  message   String   @db.Text
  reply     String   @db.Text
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("student_report")
}

model StudentLeaveReport {
  id        Int      @id @default(autoincrement())
  studentId Int
  student   Student  @relation(fields: [studentId], references: [id], onDelete: SetNull)
  date      DateTime
  message   String   @db.Text
  status    Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("student_leave_report")
}

model StudentNotification {
  id        Int      @id @default(autoincrement())
  message   String
  studentId Int
  student   Student  @relation(fields: [studentId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("student_notification")
}

model Assessment {
  id               Int                @id @default(autoincrement())
  studentId        Int
  student          Student            @relation(fields: [studentId], references: [id])
  subjectId        Int                @map("sudent_id")
  subject          Subject            @relation(fields: [subjectId], references: [id], onDelete: SetNull)
  date             DateTime           @map("date_time")
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")
  assessmentReport AssessmentReport[]

  @@map("assessment")
}

model AssessmentReport {
  id           Int        @id @default(autoincrement())
  status       String
  studentId    Int
  student      Student    @relation(fields: [studentId], references: [id], onDelete: SetNull)
  assessmentId Int
  assessment   Assessment @relation(fields: [assessmentId], references: [id])
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")

  @@map("assessment_report")
}

model Course {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  subjects  Subject[]

  @@map("course")
}

model Subject {
  id         Int          @id @default(autoincrement())
  name       String
  courseId   Int          @map("course_id")
  course     Course       @relation(fields: [courseId], references: [id])
  staffId    Int          @map("staff_id")
  staff      Staff        @relation(fields: [staffId], references: [id])
  createdAt  DateTime     @default(now()) @map("created_at")
  updatedAt  DateTime     @updatedAt @map("updated_at")
  assessment Assessment[]

  @@map("subject")
}
